
      \label{sec:arguments}
            
   Dans la majorité des langages de programmation, l'appel à un sous-programme (procé\-dure, fonction, méthodes, etc.) peut prendre des paramètres (arguments). On ne s'inté\-resse ici pas en détail sur le fonctionnement de cet appel, mais on se concentrera sur comment un paramètre effectif est transmis au sous-programme et comment son utilisation dans le corps du sous-programme peut dans certains cas impacter l'environnement. Il existe un grand nombre de mécanismes de passage d'argument mais nous allons voir les plus connus et les plus utilisés, présentés dans \cite{DBLP:books/daglib/0069787}.
  
    \subsection{Passage par valeur}
      
      Sûrement le mécanisme de passage d'arguments le plus connu et utilisé est le passage d'argument  << par valeur >>. Les modifications sont apportées aux paramètres formels et n'ont aucun impact sur l'environnement extérieur et ne modifient en aucun cas l'état du paramètre effectif. Dans ce mode de passage, le paramètre effectif est déréférencé donnant une \emph{r-value} \footnote{contenant une variable ou le résultat d'une expression} qui est copiée dans une nouvelle zone mémoire, liée à notre paramètre formel. Cependant cette copie consomme de l'espace mémoire et du temps de calcul pour la copie. Un grand nombre de langage utilise ce mécanisme, comme un mécanisme par défaut, notamment C, C++ \cite{Stroustrup:2000:CPL:518791}, ou encore Java.

    \subsection{Passage par référence}
    
     Dans le mécanisme de passage par référence, le paramètre formel fait référence à l'adresse mémoire de notre paramètre effectif. Dans ce mécanisme aucune copie n'est réalisée, ce qui permet de ne pas avoir les contraintes du passage par valeur, car aucune nouvelle zone mémoire n'a besoin d'être allouée (sauf celle du paramètre formel, bien sûr). Toutes les modifications auront un impact sur l'environnement local à la fonction mais aussi sur l'environnement extérieur à celle-ci.  
    
    Java \cite{DBLP:books/aw/ArnoldGH00} utilise le passage par valeur pour les objets. En effet, même si certains affirmeront que Java fait un passage par référence, c'est en fait un abus de langage, c'est-à-dire que techniquement c'est un passage par valeur qui entraîne une copie de la référence de notre paramètre effectif. On se retrouve alors avec deux références qui pointent vers la zone mémoire de notre objet, ce qui a pour conséquence que si on réalise un appel qui modifie un attribut d'un objet passé en paramètre cela entraînera une modification sur le paramètre effectif. Mais si on réalise une affection sur cet objet alors le paramètre formel référencera une nouvelle zone mémoire, et les nouvelles modifications de l'état de notre objet ne modifieront plus l'état de notre paramètre effectif, car feront référence à la nouvelle zone mémoire créée. 
      
    \subsection{Passage par valeur-résultat}
    
    E. Horowitz définit le passage par << value-result >> \cite{DBLP:books/daglib/0069787} comme une méthode incluant les fonctionnalités du passage par valeur et du passage par référence. Dans ce type de passage, dans le corps du sous-programme le paramètre formel a le même mécanisme que le passage par valeur, avec déréférencement du paramètre effectif et la copie dans une nouvelle zone mémoire. Durant toute l'exécution du sous-programme les modifications n'auront un impact que sur l'environnement local de la fonction, mais une fois celle-ci terminé, la valeur du paramètre formel est copiée vers celle du paramètre effectif. Ce mécanisme est utilisé par le langage ALGOL-W \cite{sites1972algol} (une variante d'Algol60).
    
    \subsection{Passage par nom}
    
  Dans ce mécanisme de passage de paramètres, c'est une substitution textuelle qui est effectuée par le paramètre d'effectif dans le corps de la fonction à chaque fois que le paramètre formel apparaît. Ce comportement est introduit comme comportement par défaut en ALGOL-60. Il réalise un effet semblable au passage par référence, dans le sens où aucune copie n'est réalisée et son champ d'action impacte aussi l’environnement extérieur. Il est aussi comparable aussi au macro en C.
    
    \subsection{ADA et ses trois nouveaux mode de passage}
   
   Le passage de paramètres en ADA est un peu particulier. En effet, comme mentionné par J-L. Nebut \cite{opac-b1077467}, le programmeur ne peut pas choisir entre un passage par valeur ou référence (les deux mécanismes présents dans ADA), mais a la possibilité de choisir un << mode >> de passage. Le mode permet au développeur de définir chaque argument comme étant en entrée (IN), sortie (OUT) ou entrée/sortie (IN OUT).

En mode \texttt{IN}, le paramètre formel est vraiment en << read-only >>, c'est-à-dire que dans le corps de la fonction on ne peut pas modifier la valeur du paramètre formel. C'est le comportement par défaut utilisé par ADA. En mode \texttt{OUT}, le paramètre formel peut être modifié dans la procédure mais ne peut être lu. Si le paramètre effectif est affecté dans la procédure, sa valeur pourra être utilisée dans la suite du programme avec cette nouvelle valeur affectée. En mode \texttt{IN OUT}, les deux mécanismes précédents sont combinés, avec comme contrainte que le paramètre effectif doit être initialisé avant l'appel.
    
    
